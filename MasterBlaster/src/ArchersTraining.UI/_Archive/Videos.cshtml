
@{
    ViewBag.Title = "Videos";
}

<h2>Videos</h2>


@*<div id='player'>
     
</div>*@



   




@section scripts{
    <script>
        //set video values
//var video = 'YOUR_VIDEO_ID_HERE'
var video = 'pI6aDyURKPM'
video.h = '390'
video.h = '390'
video.w = '640'
var player;
var tag = document.createElement('script');
tag.src = 'http://www.youtube.com/player_api';
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

function onYouTubePlayerAPIReady() {
    player = new YT.Player('player', {
        height: video.h,
        width: video.w,
        videoId: video,
        events: {
            'onStateChange': onPlayerStateChange,
            'onError': onPlayerError
        }
    });
}

function onPlayerStateChange(event) {
    switch (event.data) {
        case YT.PlayerState.PLAYING:
            if (cleanTime() == 0) {
                dataLayer.push({
                    'event': 'youtubeChange',
                    'eventCategory': 'video',
                    'eventAction': 'started',
                    'eventLabel': video
                });
            } else {
                dataLayer.push({
                    'event': 'youtubeChange',
                    'eventCategory': 'video',
                    'eventAction': 'played',
                    'eventLabel': 'v: ' + video + ' | t: ' + cleanTime()
                });
            };
            break;
        case YT.PlayerState.PAUSED:
            if (player.getDuration() - player.getCurrentTime() != 0) {
                dataLayer.push({
                    'event': 'youtubeChange',
                    'eventCategory': 'video',
                    'eventAction': 'paused',
                    'eventLabel': 'v: ' + video + ' | t: ' + cleanTime()
                });
            };
            break;
        case YT.PlayerState.ENDED:
            dataLayer.push({
                'event': 'youtubeChange',
                'eventCategory': 'video',
                'eventAction': 'ended',
                'eventLabel': video
            });
            break;
    };
};

function onPlayerError(event) {
    switch (event.data) {
        case 2:
            dataLayer.push({
                'event': 'youtubeChange',
                'eventCategory': 'video',
                'eventAction': 'invalid id',
                'eventLabel': video
            })
            break;
        case 100:
            dataLayer.push({
                'event': 'youtubeChange',
                'eventCategory': 'video',
                'eventAction': 'not found',
                'eventLabel': video
            })
            break;
        case 101 || 150:
            dataLayer.push({
                'event': 'youtubeChange',
                'eventCategory': 'video',
                'eventAction': 'not allowed',
                'eventLabel': video
            })
            break;
    };
};

function cleanTime() {
    return Math.round(player.getCurrentTime())
};
    </script>
    }
@*</div>*@

